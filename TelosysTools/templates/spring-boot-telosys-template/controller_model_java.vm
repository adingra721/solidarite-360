/*
*  Copyright (c) 2019. All right reserved
* Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
* Generated by $generator.name ( version $generator.version )
*/
package ${target.javaPackageFromFolder(${SRC})};

import ${ROOT_PKG}.entities.${entity.name};
import ${ROOT_PKG}.service.${entity.name}Service;

#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#set( $controllerClassName = "${entity.name}Ctrl" )

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import java.util.List;


/*
 * Contrôleur REST pour gérer {@link ${entity.name}}. *
 * @author @aek
 */
@RestController
@RequestMapping("/api/${uncapitalizedEntityName}")
public class $controllerClassName {

    private final Logger log = LoggerFactory.getLogger(${controllerClassName}.class);
	
    private final ${entity.name}Service entityService;

 	public $controllerClassName (${entity.name}Service entityService) {
		this.entityService = entityService;
	}

   /*
     * {@code POST  /${uncapitalizedEntityName}} : Créer un nouveau ${uncapitalizedEntityName}.
     *
     * @param ${uncapitalizedEntityName} le ${uncapitalizedEntityName} à créer.
     * @return le {@link ResponseEntity} avec le statut {@code 201 (Créé)} et avec dans le corps le nouveau ${uncapitalizedEntityName}.
     */

	@PostMapping()
	public ResponseEntity<${entity.name}> create${entity.name}(@RequestBody @Valid ${entity.name} ${uncapitalizedEntityName}) {
         log.debug("REST request to save ${entity.name} : {}", ${uncapitalizedEntityName});
         return new ResponseEntity<>(entityService.create(${uncapitalizedEntityName}), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /${uncapitalizedEntityName}} : Met à jour un(e) ${uncapitalizedEntityName} existant(e).
     *
     * @param ${uncapitalizedEntityName} le/la ${uncapitalizedEntityName} à mettre à jour.
     * @return le {@link ResponseEntity} avec le statut {@code 200 (OK)} et avec dans le corps le/la ${uncapitalizedEntityName} mis(e) à jour,
     * ou avec le statut {@code 400 (Bad Request)} si le/la ${uncapitalizedEntityName} n'est pas valide,
     * ou avec le statut {@code 500 (Internal Server Error)} si le/la ${uncapitalizedEntityName} n'a pas pu être mis(e) à jour.
     */

    @PutMapping()
    public ResponseEntity<${entity.name}> update${entity.name}(@Valid @RequestBody ${entity.name} ${uncapitalizedEntityName}) {
        log.debug("REST request to update ${entity.name} : {}", ${uncapitalizedEntityName});
        ${entity.name} result = entityService.update(${uncapitalizedEntityName});
        return ResponseEntity.ok().body(result);
    }

   /**
     * {@code GET  /${uncapitalizedEntityName}} : récupérer tous les ${uncapitalizedEntityName}s.
     *
     * @return le {@link ResponseEntity} avec le statut {@code 200 (OK)} et la liste des ${uncapitalizedEntityName}s dans le corps de la réponse.
     */
    @GetMapping()
    public ResponseEntity<List<${entity.name}>> getAll${entity.name}() {
	    log.debug("REST request to get all ${uncapitalizedEntityName}s");
        List<${entity.name}> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

 /**
     * {@code GET  /${uncapitalizedEntityName}/:id} : récupérer le/la ${uncapitalizedEntityName} avec l'identifiant "id".
     *
     * @param id l'identifiant du/de la ${uncapitalizedEntityName} à récupérer.
     * @return le {@link ResponseEntity} avec le statut {@code 200 (OK)} et dans le corps le/la ${uncapitalizedEntityName}, ou avec le statut {@code 404 (Not Found)}.
     */

    @GetMapping(value = "/{id}")
    public ResponseEntity<${entity.name}> getOne${entity.name}(@PathVariable("id") ${entity.keyAttributes[0].formattedType(0)} id) {
        log.debug("REST request to get ${entity.name} : {}", id);
        ${entity.name} e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

 /**
     * {@code DELETE  /${uncapitalizedEntityName}/:id} : supprimer le/la ${uncapitalizedEntityName} avec l'identifiant "id".
     *
     * @param id l'identifiant du/de la ${uncapitalizedEntityName} à supprimer.
     * @return le {@link ResponseEntity} avec le statut {@code 204 (NO_CONTENT)}.
     */

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete${entity.name}(@PathVariable("id") ${entity.keyAttributes[0].formattedType(0)} id) {
        log.debug("REST request to delete ${entity.name} : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
