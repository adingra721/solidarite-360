/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-10-05 ( Date ISO 2024-10-05 - Time 15:16:58 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package sn.afrik.tech.solidarite_360.controllers.doc;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import sn.afrik.tech.solidarite_360.entities.doc.CompteRendu;
import sn.afrik.tech.solidarite_360.services.impl.CompteRenduService;


/**
 * REST controller for managing {@link CompteRendu}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/compteRendu")
public class CompteRenduCtrl {

    private final Logger log = LoggerFactory.getLogger(CompteRenduCtrl.class);
	
    private final CompteRenduService entityService;

 	public CompteRenduCtrl (CompteRenduService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /compteRendu} : Create a new compteRendu.
     *
     * @param compteRendu the compteRendu to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new compteRendu.
     */
	@PostMapping()
	public ResponseEntity<CompteRendu> createCompteRendu(@RequestBody @Valid CompteRendu compteRendu) {
         log.debug("REST request to save CompteRendu : {}", compteRendu);
         return new ResponseEntity<>(entityService.create(compteRendu), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /compteRendu} : Updates an existing compteRendu.
     *
     * @param compteRendu the compteRendu to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated compteRendu,
     * or with status {@code 400 (Bad Request)} if the compteRendu is not valid,
     * or with status {@code 500 (Internal Server Error)} if the compteRendu couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<CompteRendu> updateCompteRendu(@Valid @RequestBody CompteRendu compteRendu) {
        log.debug("REST request to update CompteRendu : {}", compteRendu);
        CompteRendu result = entityService.update(compteRendu);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /compteRendu} : get all the compteRendus.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of compteRendu in body.
     */

    @GetMapping()
    public ResponseEntity<List<CompteRendu>> getAllCompteRendu() {
	    log.debug("REST request to get all compteRendus");
        List<CompteRendu> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /compteRendu/:id} : get the "id" compteRendu.
     *
     * @param id the id of the compteRendu to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the compteRendu, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<CompteRendu> getOneCompteRendu(@PathVariable("id") Long id) {
        log.debug("REST request to get CompteRendu : {}", id);
        CompteRendu e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /compteRendu/:id} : delete the "id" compteRendu.
     *
     * @param id the id of the compteRendu to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCompteRendu(@PathVariable("id") Long id) {
        log.debug("REST request to delete CompteRendu : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
