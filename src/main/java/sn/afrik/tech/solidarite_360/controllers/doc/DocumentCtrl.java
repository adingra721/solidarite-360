/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-10-05 ( Date ISO 2024-10-05 - Time 16:20:12 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package sn.afrik.tech.solidarite_360.controllers.doc;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import sn.afrik.tech.solidarite_360.entities.doc.Document;
import sn.afrik.tech.solidarite_360.services.impl.DocumentService;


/*
 * Contrôleur REST pour gérer {@link Document}. *
 * @author @aek
 */
@RestController
@RequestMapping("/api/document")
public class DocumentCtrl {

    private final Logger log = LoggerFactory.getLogger(DocumentCtrl.class);
	
    private final DocumentService entityService;

 	public DocumentCtrl (DocumentService entityService) {
		this.entityService = entityService;
	}

   /*
     * {@code POST  /document} : Créer un nouveau document.
     *
     * @param document le document à créer.
     * @return le {@link ResponseEntity} avec le statut {@code 201 (Créé)} et avec dans le corps le nouveau document.
     */

	@PostMapping()
	public ResponseEntity<Document> createDocument(@RequestBody @Valid Document document) {
         log.debug("REST request to save Document : {}", document);
         return new ResponseEntity<>(entityService.create(document), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /document} : Met à jour un(e) document existant(e).
     *
     * @param document le/la document à mettre à jour.
     * @return le {@link ResponseEntity} avec le statut {@code 200 (OK)} et avec dans le corps le/la document mis(e) à jour,
     * ou avec le statut {@code 400 (Bad Request)} si le/la document n'est pas valide,
     * ou avec le statut {@code 500 (Internal Server Error)} si le/la document n'a pas pu être mis(e) à jour.
     */

    @PutMapping()
    public ResponseEntity<Document> updateDocument(@Valid @RequestBody Document document) {
        log.debug("REST request to update Document : {}", document);
        Document result = entityService.update(document);
        return ResponseEntity.ok().body(result);
    }

   /**
     * {@code GET  /document} : récupérer tous les documents.
     *
     * @return le {@link ResponseEntity} avec le statut {@code 200 (OK)} et la liste des documents dans le corps de la réponse.
     */
    @GetMapping()
    public ResponseEntity<List<Document>> getAllDocument() {
	    log.debug("REST request to get all documents");
        List<Document> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

 /**
     * {@code GET  /document/:id} : récupérer le/la document avec l'identifiant "id".
     *
     * @param id l'identifiant du/de la document à récupérer.
     * @return le {@link ResponseEntity} avec le statut {@code 200 (OK)} et dans le corps le/la document, ou avec le statut {@code 404 (Not Found)}.
     */

    @GetMapping(value = "/{id}")
    public ResponseEntity<Document> getOneDocument(@PathVariable("id") Long id) {
        log.debug("REST request to get Document : {}", id);
        Document e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

 /**
     * {@code DELETE  /document/:id} : supprimer le/la document avec l'identifiant "id".
     *
     * @param id l'identifiant du/de la document à supprimer.
     * @return le {@link ResponseEntity} avec le statut {@code 204 (NO_CONTENT)}.
     */

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteDocument(@PathVariable("id") Long id) {
        log.debug("REST request to delete Document : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
