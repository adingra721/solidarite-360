/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-10-05 ( Date ISO 2024-10-05 - Time 15:16:59 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package sn.afrik.tech.solidarite_360.controllers.evt;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import sn.afrik.tech.solidarite_360.entities.evt.PresenceActivite;
import sn.afrik.tech.solidarite_360.services.impl.PresenceActiviteService;


/**
 * REST controller for managing {@link PresenceActivite}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/presenceActivite")
public class PresenceActiviteCtrl {

    private final Logger log = LoggerFactory.getLogger(PresenceActiviteCtrl.class);
	
    private final PresenceActiviteService entityService;

 	public PresenceActiviteCtrl (PresenceActiviteService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /presenceActivite} : Create a new presenceActivite.
     *
     * @param presenceActivite the presenceActivite to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new presenceActivite.
     */
	@PostMapping()
	public ResponseEntity<PresenceActivite> createPresenceActivite(@RequestBody @Valid PresenceActivite presenceActivite) {
         log.debug("REST request to save PresenceActivite : {}", presenceActivite);
         return new ResponseEntity<>(entityService.create(presenceActivite), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /presenceActivite} : Updates an existing presenceActivite.
     *
     * @param presenceActivite the presenceActivite to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated presenceActivite,
     * or with status {@code 400 (Bad Request)} if the presenceActivite is not valid,
     * or with status {@code 500 (Internal Server Error)} if the presenceActivite couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<PresenceActivite> updatePresenceActivite(@Valid @RequestBody PresenceActivite presenceActivite) {
        log.debug("REST request to update PresenceActivite : {}", presenceActivite);
        PresenceActivite result = entityService.update(presenceActivite);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /presenceActivite} : get all the presenceActivites.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of presenceActivite in body.
     */

    @GetMapping()
    public ResponseEntity<List<PresenceActivite>> getAllPresenceActivite() {
	    log.debug("REST request to get all presenceActivites");
        List<PresenceActivite> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /presenceActivite/:id} : get the "id" presenceActivite.
     *
     * @param id the id of the presenceActivite to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the presenceActivite, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<PresenceActivite> getOnePresenceActivite(@PathVariable("id") Long id) {
        log.debug("REST request to get PresenceActivite : {}", id);
        PresenceActivite e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /presenceActivite/:id} : delete the "id" presenceActivite.
     *
     * @param id the id of the presenceActivite to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePresenceActivite(@PathVariable("id") Long id) {
        log.debug("REST request to delete PresenceActivite : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
