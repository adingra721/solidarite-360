/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-10-05 ( Date ISO 2024-10-05 - Time 15:17:01 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package sn.afrik.tech.solidarite_360.controllers.ref;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import sn.afrik.tech.solidarite_360.entities.ref.TypeDocument;
import sn.afrik.tech.solidarite_360.services.impl.TypeDocumentService;


/**
 * REST controller for managing {@link TypeDocument}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/typeDocument")
public class TypeDocumentCtrl {

    private final Logger log = LoggerFactory.getLogger(TypeDocumentCtrl.class);
	
    private final TypeDocumentService entityService;

 	public TypeDocumentCtrl (TypeDocumentService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /typeDocument} : Create a new typeDocument.
     *
     * @param typeDocument the typeDocument to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new typeDocument.
     */
	@PostMapping()
	public ResponseEntity<TypeDocument> createTypeDocument(@RequestBody @Valid TypeDocument typeDocument) {
         log.debug("REST request to save TypeDocument : {}", typeDocument);
         return new ResponseEntity<>(entityService.create(typeDocument), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /typeDocument} : Updates an existing typeDocument.
     *
     * @param typeDocument the typeDocument to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated typeDocument,
     * or with status {@code 400 (Bad Request)} if the typeDocument is not valid,
     * or with status {@code 500 (Internal Server Error)} if the typeDocument couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<TypeDocument> updateTypeDocument(@Valid @RequestBody TypeDocument typeDocument) {
        log.debug("REST request to update TypeDocument : {}", typeDocument);
        TypeDocument result = entityService.update(typeDocument);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /typeDocument} : get all the typeDocuments.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of typeDocument in body.
     */

    @GetMapping()
    public ResponseEntity<List<TypeDocument>> getAllTypeDocument() {
	    log.debug("REST request to get all typeDocuments");
        List<TypeDocument> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /typeDocument/:id} : get the "id" typeDocument.
     *
     * @param id the id of the typeDocument to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the typeDocument, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<TypeDocument> getOneTypeDocument(@PathVariable("id") Long id) {
        log.debug("REST request to get TypeDocument : {}", id);
        TypeDocument e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /typeDocument/:id} : delete the "id" typeDocument.
     *
     * @param id the id of the typeDocument to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTypeDocument(@PathVariable("id") Long id) {
        log.debug("REST request to delete TypeDocument : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
