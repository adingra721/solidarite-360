/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-10-05 ( Date ISO 2024-10-05 - Time 15:17:01 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package sn.afrik.tech.solidarite_360.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import sn.afrik.tech.solidarite_360.entities.Validation;
import sn.afrik.tech.solidarite_360.services.impl.ValidationService;


/**
 * REST controller for managing {@link Validation}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/validation")
public class ValidationCtrl {

    private final Logger log = LoggerFactory.getLogger(ValidationCtrl.class);
	
    private final ValidationService entityService;

 	public ValidationCtrl (ValidationService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /validation} : Create a new validation.
     *
     * @param validation the validation to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new validation.
     */
	@PostMapping()
	public ResponseEntity<Validation> createValidation(@RequestBody @Valid Validation validation) {
         log.debug("REST request to save Validation : {}", validation);
         return new ResponseEntity<>(entityService.create(validation), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /validation} : Updates an existing validation.
     *
     * @param validation the validation to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated validation,
     * or with status {@code 400 (Bad Request)} if the validation is not valid,
     * or with status {@code 500 (Internal Server Error)} if the validation couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<Validation> updateValidation(@Valid @RequestBody Validation validation) {
        log.debug("REST request to update Validation : {}", validation);
        Validation result = entityService.update(validation);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /validation} : get all the validations.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of validation in body.
     */

    @GetMapping()
    public ResponseEntity<List<Validation>> getAllValidation() {
	    log.debug("REST request to get all validations");
        List<Validation> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /validation/:id} : get the "id" validation.
     *
     * @param id the id of the validation to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the validation, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<Validation> getOneValidation(@PathVariable("id") Long id) {
        log.debug("REST request to get Validation : {}", id);
        Validation e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /validation/:id} : delete the "id" validation.
     *
     * @param id the id of the validation to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteValidation(@PathVariable("id") Long id) {
        log.debug("REST request to delete Validation : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
