/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-10-05 ( Date ISO 2024-10-05 - Time 15:16:59 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package sn.afrik.tech.solidarite_360.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import sn.afrik.tech.solidarite_360.entities.Notification;
import sn.afrik.tech.solidarite_360.services.impl.NotificationService;


/**
 * REST controller for managing {@link Notification}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/notification")
public class NotificationCtrl {

    private final Logger log = LoggerFactory.getLogger(NotificationCtrl.class);
	
    private final NotificationService entityService;

 	public NotificationCtrl (NotificationService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /notification} : Create a new notification.
     *
     * @param notification the notification to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new notification.
     */
	@PostMapping()
	public ResponseEntity<Notification> createNotification(@RequestBody @Valid Notification notification) {
         log.debug("REST request to save Notification : {}", notification);
         return new ResponseEntity<>(entityService.create(notification), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /notification} : Updates an existing notification.
     *
     * @param notification the notification to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated notification,
     * or with status {@code 400 (Bad Request)} if the notification is not valid,
     * or with status {@code 500 (Internal Server Error)} if the notification couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<Notification> updateNotification(@Valid @RequestBody Notification notification) {
        log.debug("REST request to update Notification : {}", notification);
        Notification result = entityService.update(notification);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /notification} : get all the notifications.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of notification in body.
     */

    @GetMapping()
    public ResponseEntity<List<Notification>> getAllNotification() {
	    log.debug("REST request to get all notifications");
        List<Notification> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /notification/:id} : get the "id" notification.
     *
     * @param id the id of the notification to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the notification, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<Notification> getOneNotification(@PathVariable("id") Long id) {
        log.debug("REST request to get Notification : {}", id);
        Notification e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /notification/:id} : delete the "id" notification.
     *
     * @param id the id of the notification to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteNotification(@PathVariable("id") Long id) {
        log.debug("REST request to delete Notification : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
