/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-10-05 ( Date ISO 2024-10-05 - Time 15:16:55 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package sn.afrik.tech.solidarite_360.controllers.evt;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import sn.afrik.tech.solidarite_360.entities.evt.Activite;
import sn.afrik.tech.solidarite_360.services.impl.ActiviteService;


/**
 * REST controller for managing {@link Activite}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/activite")
public class ActiviteCtrl {

    private final Logger log = LoggerFactory.getLogger(ActiviteCtrl.class);
	
    private final ActiviteService entityService;

 	public ActiviteCtrl (ActiviteService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /activite} : Create a new activite.
     *
     * @param activite the activite to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new activite.
     */
	@PostMapping()
	public ResponseEntity<Activite> createActivite(@RequestBody @Valid Activite activite) {
         log.debug("REST request to save Activite : {}", activite);
         return new ResponseEntity<>(entityService.create(activite), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /activite} : Updates an existing activite.
     *
     * @param activite the activite to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated activite,
     * or with status {@code 400 (Bad Request)} if the activite is not valid,
     * or with status {@code 500 (Internal Server Error)} if the activite couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<Activite> updateActivite(@Valid @RequestBody Activite activite) {
        log.debug("REST request to update Activite : {}", activite);
        Activite result = entityService.update(activite);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /activite} : get all the activites.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of activite in body.
     */

    @GetMapping()
    public ResponseEntity<List<Activite>> getAllActivite() {
	    log.debug("REST request to get all activites");
        List<Activite> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /activite/:id} : get the "id" activite.
     *
     * @param id the id of the activite to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the activite, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<Activite> getOneActivite(@PathVariable("id") Long id) {
        log.debug("REST request to get Activite : {}", id);
        Activite e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /activite/:id} : delete the "id" activite.
     *
     * @param id the id of the activite to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteActivite(@PathVariable("id") Long id) {
        log.debug("REST request to delete Activite : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
