/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-10-05 ( Date ISO 2024-10-05 - Time 15:17:01 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package sn.afrik.tech.solidarite_360.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import sn.afrik.tech.solidarite_360.entities.Tache;
import sn.afrik.tech.solidarite_360.services.impl.TacheService;


/**
 * REST controller for managing {@link Tache}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/tache")
public class TacheCtrl {

    private final Logger log = LoggerFactory.getLogger(TacheCtrl.class);
	
    private final TacheService entityService;

 	public TacheCtrl (TacheService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /tache} : Create a new tache.
     *
     * @param tache the tache to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new tache.
     */
	@PostMapping()
	public ResponseEntity<Tache> createTache(@RequestBody @Valid Tache tache) {
         log.debug("REST request to save Tache : {}", tache);
         return new ResponseEntity<>(entityService.create(tache), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /tache} : Updates an existing tache.
     *
     * @param tache the tache to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated tache,
     * or with status {@code 400 (Bad Request)} if the tache is not valid,
     * or with status {@code 500 (Internal Server Error)} if the tache couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<Tache> updateTache(@Valid @RequestBody Tache tache) {
        log.debug("REST request to update Tache : {}", tache);
        Tache result = entityService.update(tache);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /tache} : get all the taches.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of tache in body.
     */

    @GetMapping()
    public ResponseEntity<List<Tache>> getAllTache() {
	    log.debug("REST request to get all taches");
        List<Tache> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /tache/:id} : get the "id" tache.
     *
     * @param id the id of the tache to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the tache, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<Tache> getOneTache(@PathVariable("id") Long id) {
        log.debug("REST request to get Tache : {}", id);
        Tache e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /tache/:id} : delete the "id" tache.
     *
     * @param id the id of the tache to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTache(@PathVariable("id") Long id) {
        log.debug("REST request to delete Tache : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
