/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-10-05 ( Date ISO 2024-10-05 - Time 15:16:59 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package sn.afrik.tech.solidarite_360.controllers.ref;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import sn.afrik.tech.solidarite_360.entities.ref.ModePaiement;
import sn.afrik.tech.solidarite_360.services.impl.ModePaiementService;


/**
 * REST controller for managing {@link ModePaiement}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/modePaiement")
public class ModePaiementCtrl {

    private final Logger log = LoggerFactory.getLogger(ModePaiementCtrl.class);
	
    private final ModePaiementService entityService;

 	public ModePaiementCtrl (ModePaiementService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /modePaiement} : Create a new modePaiement.
     *
     * @param modePaiement the modePaiement to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new modePaiement.
     */
	@PostMapping()
	public ResponseEntity<ModePaiement> createModePaiement(@RequestBody @Valid ModePaiement modePaiement) {
         log.debug("REST request to save ModePaiement : {}", modePaiement);
         return new ResponseEntity<>(entityService.create(modePaiement), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /modePaiement} : Updates an existing modePaiement.
     *
     * @param modePaiement the modePaiement to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated modePaiement,
     * or with status {@code 400 (Bad Request)} if the modePaiement is not valid,
     * or with status {@code 500 (Internal Server Error)} if the modePaiement couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<ModePaiement> updateModePaiement(@Valid @RequestBody ModePaiement modePaiement) {
        log.debug("REST request to update ModePaiement : {}", modePaiement);
        ModePaiement result = entityService.update(modePaiement);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /modePaiement} : get all the modePaiements.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of modePaiement in body.
     */

    @GetMapping()
    public ResponseEntity<List<ModePaiement>> getAllModePaiement() {
	    log.debug("REST request to get all modePaiements");
        List<ModePaiement> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /modePaiement/:id} : get the "id" modePaiement.
     *
     * @param id the id of the modePaiement to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the modePaiement, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<ModePaiement> getOneModePaiement(@PathVariable("id") Long id) {
        log.debug("REST request to get ModePaiement : {}", id);
        ModePaiement e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /modePaiement/:id} : delete the "id" modePaiement.
     *
     * @param id the id of the modePaiement to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteModePaiement(@PathVariable("id") Long id) {
        log.debug("REST request to delete ModePaiement : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
