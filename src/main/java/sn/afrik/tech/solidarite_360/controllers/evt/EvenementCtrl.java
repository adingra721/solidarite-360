/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-10-05 ( Date ISO 2024-10-05 - Time 15:16:58 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package sn.afrik.tech.solidarite_360.controllers.evt;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import sn.afrik.tech.solidarite_360.entities.evt.Evenement;
import sn.afrik.tech.solidarite_360.services.impl.EvenementService;


/**
 * REST controller for managing {@link Evenement}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/evenement")
public class EvenementCtrl {

    private final Logger log = LoggerFactory.getLogger(EvenementCtrl.class);
	
    private final EvenementService entityService;

 	public EvenementCtrl (EvenementService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /evenement} : Create a new evenement.
     *
     * @param evenement the evenement to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new evenement.
     */
	@PostMapping()
	public ResponseEntity<Evenement> createEvenement(@RequestBody @Valid Evenement evenement) {
         log.debug("REST request to save Evenement : {}", evenement);
         return new ResponseEntity<>(entityService.create(evenement), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /evenement} : Updates an existing evenement.
     *
     * @param evenement the evenement to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated evenement,
     * or with status {@code 400 (Bad Request)} if the evenement is not valid,
     * or with status {@code 500 (Internal Server Error)} if the evenement couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<Evenement> updateEvenement(@Valid @RequestBody Evenement evenement) {
        log.debug("REST request to update Evenement : {}", evenement);
        Evenement result = entityService.update(evenement);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /evenement} : get all the evenements.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of evenement in body.
     */

    @GetMapping()
    public ResponseEntity<List<Evenement>> getAllEvenement() {
	    log.debug("REST request to get all evenements");
        List<Evenement> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /evenement/:id} : get the "id" evenement.
     *
     * @param id the id of the evenement to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the evenement, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<Evenement> getOneEvenement(@PathVariable("id") Long id) {
        log.debug("REST request to get Evenement : {}", id);
        Evenement e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /evenement/:id} : delete the "id" evenement.
     *
     * @param id the id of the evenement to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEvenement(@PathVariable("id") Long id) {
        log.debug("REST request to delete Evenement : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
